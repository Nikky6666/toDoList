{"version":3,"sources":["ToDoListFooter.jsx","ToDoListHeader.jsx","ToDoListTask.js","ToDoListTasks.js","App.js","serviceWorker.js","index.js"],"names":["ToDoListFooter","React","Component","render","classForAll","props","filterValue","classForCompleted","classForActive","className","ToDoListTask","type","checked","isDone","title","priority","ToDoListTasks","tasksElements","tasks","map","task","App","state","onAddTaskClick","newTask","newTaskTitleRef","current","value","newTasks","setState","ref","placeholder","onClick","createRef","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAoBeA,G,KCjBcC,IAAMC,U,2MDC/BC,OAAS,WAEL,IAAIC,EAAyC,QAA3B,EAAKC,MAAMC,YAAwB,gBAAkB,GACnEC,EAA+C,cAA3B,EAAKF,MAAMC,YAA8B,gBAAkB,GAC/EE,EAA4C,WAA3B,EAAKH,MAAMC,YAA2B,gBAAkB,GAE7E,OACI,yBAAKG,UAAU,mBACX,4BAAQA,UAAWL,GAAnB,OACA,4BAAQK,UAAWF,GAAnB,aACA,4BAAQE,UAAWD,GAAnB,Y,6BAXaP,IAAMC,YESpBQ,E,2MATXP,OAAS,WACL,OAAQ,yBAAKM,UAAU,iBACnB,2BAAOE,KAAK,WAAWC,QAAS,EAAKP,MAAMQ,SAC3C,wCAAU,EAAKR,MAAMS,MAArB,uBAAyC,EAAKT,MAAMU,a,6BAJrCd,IAAMC,WCclBc,E,2MAZXb,OAAS,WACL,IAAMc,EAAgB,EAAKZ,MAAMa,MAAMC,KACnC,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAcN,MAAOM,EAAKN,MAAOD,OAAQO,EAAKP,OAAQE,SAAUK,EAAKL,cAEjF,OACY,yBAAKN,UAAU,kBACbQ,I,6BAPMhB,IAAMC,WC+DnBmB,E,YA3DX,WAAYhB,GAAQ,IAAD,8BACf,4CAAMA,KAWViB,MAAQ,CACJJ,MAAO,CACH,CAACJ,MAAO,MAAOD,QAAQ,EAAME,SAAU,UACvC,CAACD,MAAO,OAAQD,QAAQ,EAAME,SAAU,OACxC,CAACD,MAAO,KAAMD,QAAQ,EAAME,SAAU,QACtC,CAACD,MAAO,UAAWD,QAAQ,EAAOE,SAAU,UAGhDT,YAAa,aApBE,EAuBnBiB,eAAiB,WACb,IAAIC,EAAU,CACVV,MAAO,EAAKW,gBAAgBC,QAAQC,MACpCd,QAAQ,EACRE,SAAU,SAEVa,EAAQ,sBAAO,EAAKN,MAAMJ,OAAlB,CAAyBM,IACrC,EAAKK,SAAS,CACVX,MAAOU,IAEX,EAAKH,gBAAgBC,QAAQC,MAAQ,IAjCtB,EAoCnBxB,OAAS,WACL,OACI,yBAAKM,UAAU,OACX,yBAAKA,UAAU,YAEX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,0BAAd,iBACA,yBAAKA,UAAU,wBACX,2BAAOqB,IAAK,EAAKL,gBAAiBd,KAAK,OAAOoB,YAAY,kBAC1D,4BAAQC,QAAS,EAAKT,gBAAtB,SAKR,kBAAC,EAAD,CAAeL,MAAO,EAAKI,MAAMJ,QACjC,kBAAC,EAAD,CAAgBZ,YAAa,EAAKgB,MAAMhB,iBAjDpD,EAAKmB,gBAAkBxB,IAAMgC,YAFd,E,2BADLhC,IAAMC,WCMJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASpC,OAAO,kBAAC,EAAD,MAASqC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.11f22da1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass ToDoListFooter extends React.Component {\n    render = () => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                <button className={classForAll}>All</button>\n                <button className={classForCompleted}>Completed</button>\n                <button className={classForActive}>Active</button>\n            </div>\n        );\n    }\n}\n\nexport default ToDoListFooter;\n\n","import React from 'react';\n\n\nclass ToDoListHeader extends React.Component {\n    render = () => {\n        return (\n            <div className=\"todoList-header\">\n                <h3 className=\"todoList-header__title\">What to Learn</h3>\n                <div className=\"todoList-newTaskForm\">\n                    <input type=\"text\" placeholder=\"New task name\" />\n                    <button>Add</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ToDoListHeader;\n\n","import React from 'react';\n\nclass ToDoListTask extends React.Component {\n    render = () => {\n        return (<div className=\"todoList-task\">\n            <input type=\"checkbox\" checked={this.props.isDone} />\n            <span>{`${this.props.title}, priority: ${this.props.priority}`}</span>\n        </div>\n        );\n    }\n}\n\nexport default ToDoListTask;\n\n","import React from 'react';\nimport ToDoListTask from './ToDoListTask';\n\nclass ToDoListTasks extends React.Component {\n    render = () => {\n        const tasksElements = this.props.tasks.map(\n            task => <ToDoListTask title={task.title} isDone={task.isDone} priority={task.priority} />\n        )\n        return (\n                    <div className=\"todoList-tasks\">\n                     {tasksElements}\n                    </div>\n        );\n    }\n}\n\nexport default ToDoListTasks;\n\n","import React from 'react';\nimport './App.css';\nimport ToDoListHeader from './ToDoListHeader';\nimport ToDoListFooter from './ToDoListFooter';\nimport ToDoListTasks from './ToDoListTasks';\n// классовая компонента - объект, у которого есть свой локальный стейт и метод сетстейт\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.newTaskTitleRef = React.createRef();\n        /*  setTimeout(() => {\n              let newTask = {title: \"React\", isDone: false, priority: \"hight\"};\n              let newTasks = [...this.state.tasks, newTask];\n              this.setState ({\n                  tasks: newTasks\n              });\n          }, 2000)*/\n    };\n\n    state = {\n        tasks: [\n            {title: \"CSS\", isDone: true, priority: \"medium\"},\n            {title: \"HTML\", isDone: true, priority: \"low\"},\n            {title: \"JS\", isDone: true, priority: \"high\"},\n            {title: \"ReactJS\", isDone: false, priority: \"hight\"}\n        ],\n\n        filterValue: \"Completed\",\n    };\n\n    onAddTaskClick = () => {\n        let newTask = {\n            title: this.newTaskTitleRef.current.value,\n            isDone: false,\n            priority: \"hight\"\n        };\n        let newTasks = [...this.state.tasks, newTask];\n        this.setState({\n            tasks: newTasks\n        });\n        this.newTaskTitleRef.current.value = \"\";\n    }\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n\n                    <div className=\"todoList-header\">\n                        <h3 className=\"todoList-header__title\">What to Learn</h3>\n                        <div className=\"todoList-newTaskForm\">\n                            <input ref={this.newTaskTitleRef} type=\"text\" placeholder=\"New task name\"/>\n                            <button onClick={this.onAddTaskClick}>Add</button>\n                        </div>\n                    </div>\n\n                    {/*<ToDoListHeader/>*/}\n                    <ToDoListTasks tasks={this.state.tasks}/>\n                    <ToDoListFooter filterValue={this.state.filterValue}/>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}