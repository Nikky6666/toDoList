{"version":3,"sources":["ToDoListHeader.jsx","ToDoListFooter.jsx","ToDoListTask.js","ToDoListTasks.js","App.js","serviceWorker.js","index.js"],"names":["ToDoListHeader","state","error","title","chekOnSpaceOnly","i","length","onAddTaskClick","newTitle","setState","props","addTask","onChangeInput","e","currentTarget","value","onKeyPress","key","render","classForInput","className","onChange","type","placeholder","onClick","React","Component","ToDoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","ToDoListTask","onIsDoneChanged","changeStatus","task","checked","classForTask","isDone","priority","ToDoListTasks","tasksElements","tasks","map","App","newText","newTask","newTasks","newFilterValue","t","filter","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c328851.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass ToDoListHeader extends React.Component {\n\n    state = {\n        error: false,\n        title: \"\",\n    };\n\n    chekOnSpaceOnly = (title) => {\n        for(let i=0;i<title.length; i++) if(title[i]!==\" \") return false;\n        return true;\n    };\n\n    onAddTaskClick = () => {\n        let newTitle = this.state.title;\n        if (newTitle === \"\" || this.chekOnSpaceOnly(newTitle)) {\n            this.setState({error: true});\n        } else {\n            this.props.addTask(newTitle);\n            this.setState({\n                error: false,\n                title: \"\"\n            });\n        }\n    };\n\n        onChangeInput = (e) => {\n            this.setState({\n                title: e.currentTarget.value\n            })\n           e.currentTarget.value===\"\" ? this.setState({error: true}) : this.setState({error:false});\n        };\n\n        onKeyPress = (e) => {\n            if(e.key==='Enter') this.onAddTaskClick()\n        };\n\n    render = () => {\n        const classForInput = this.state.error ? \"error\": \"\";\n        return (\n            <div className=\"todoList-header\">\n                <h3 className=\"todoList-header__title\">What to Learn</h3>\n                <div className=\"todoList-newTaskForm\">\n                    <input onKeyPress={this.onKeyPress}\n                           onChange={this.onChangeInput}\n                           type=\"text\"\n                           placeholder=\"New task name\"\n                           className={`${classForInput} decorationInput`}\n                           value={this.state.title}\n                    />\n                    <button onClick={this.onAddTaskClick}>Add</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ToDoListHeader;\n\n","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\n\nclass ToDoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    };\n\n    onAllFilterClick = () => {this.props.changeFilter(\"All\") };\n    onCompletedFilterClick = () => {this.props.changeFilter(\"Completed\")};\n    onActiveFilterClick = () => {this.props.changeFilter(\"Active\") };\n    onShowFiltersClick = () => {this.setState({isHidden: false})};\n    onHideFiltersClick = () => {this.setState({isHidden: true})};\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <div>\n                <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                <button onClick={ this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                <button onClick={ this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>\n               }\n                {!this.state.isHidden && <span onClick={this.onHideFiltersClick}>hide</span>}\n                {this.state.isHidden && <span onClick={this.onShowFiltersClick}>show</span>}\n            </div>\n        );\n    }\n}\n\nexport default ToDoListFooter;\n\nToDoListFooter.propTypes = {\n    filterValue: PropTypes.string\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nclass ToDoListTask extends React.Component {\n    onIsDoneChanged = (e) => {\n        this.props.changeStatus(this.props.task, e.currentTarget.checked);\n    };\n        render = () => {\n            const classForTask = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n        return (<div className={classForTask}>\n            <input type=\"checkbox\" checked={this.props.task.isDone} onChange={this.onIsDoneChanged} />\n            <span>{`${this.props.task.title}, priority: ${this.props.task.priority}`}</span>\n        </div>\n        );\n    }\n}\n\nexport default ToDoListTask;\n\nToDoListTask.propTypes = {\n    title: PropTypes.string,\n    isDone: PropTypes.bool,\n    priority: PropTypes.string\n}\n","import React from 'react';\nimport ToDoListTask from './ToDoListTask';\nimport PropTypes from 'prop-types';\n\nclass ToDoListTasks extends React.Component {\n    render = () => {\n        const tasksElements = this.props.tasks.map(\n            task => <ToDoListTask task={task} changeStatus={this.props.changeStatus}/>\n        )\n        return (\n                    <div className=\"todoList-tasks\">\n                     {tasksElements}\n                    </div>\n        );\n    }\n}\n\nexport default ToDoListTasks;\n\nToDoListTasks.propTypes = {\n\n    tasks: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.string,\n        isDone: PropTypes.bool,\n        priority: PropTypes.string\n    })\n    )\n\n}\n","import React from 'react';\nimport './App.css';\nimport ToDoListHeader from './ToDoListHeader';\nimport ToDoListFooter from './ToDoListFooter';\nimport ToDoListTasks from './ToDoListTasks';\n\n\n// классовая компонента - объект, у которого есть свой локальный стейт и\n// метод сетстейт\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n    };\n\n    state = {\n        tasks: [\n            {title: \"CSS\", isDone: true, priority: \"medium\"},\n            {title: \"HTML\", isDone: true, priority: \"low\"},\n            {title: \"JS\", isDone: true, priority: \"high\"},\n            {title: \"ReactJS\", isDone: false, priority: \"hight\"}\n        ],\n        filterValue: \"All\",\n    };\n\n    addTask = (newText) => {\n        let newTask = {\n            title: newText,\n            isDone: false,\n            priority: \"hight\"\n        };\n        let newTasks = [...this.state.tasks, newTask];\n        this.setState({\n            tasks: newTasks\n        });\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        })\n    };\n\n    changeStatus = (task, isDone) =>{\n        let newTasks = this.state.tasks.map(\n            t => {\n                if(t!==task) return t\n                else return {...task, isDone}\n            }\n        )\n        this.setState({\n            tasks: newTasks\n            })\n    };\n\n    render = () => {\n        const getFiltredTasks = (tasks, filter) => {\n            return tasks.filter(t => {\n                switch (filter) {\n                    case 'All': return true;\n                    case 'Completed': return t.isDone;\n                    case 'Active':return !t.isDone;\n                }\n            })\n        };\n\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n                    <ToDoListHeader addTask={this.addTask}/>\n                    <ToDoListTasks tasks={getFiltredTasks(this.state.tasks, this.state.filterValue)} changeStatus={this.changeStatus}/>\n                    < ToDoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}