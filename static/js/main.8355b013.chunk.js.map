{"version":3,"sources":["AddNewItemForm.jsx","ToDoListFooter.jsx","ToDoListTask.js","ToDoListTasks.js","ToDoListTitle.jsx","todolistAPI.js","reduser.js","ToDoList.js","App.js","serviceWorker.js","store.js","index.js"],"names":["AddNewItemForm","state","error","title","onAddItemClick","newTitle","trim","setState","props","addItem","onChangeInput","e","currentTarget","value","onKeyPress","key","render","classForInput","className","onChange","type","placeholder","onClick","React","Component","ToDoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","ToDoListTask","editMode","task","activateEditMode","deactivateEditMode","updatedTask","changeTask","onTitleChanged","onIsDoneChanged","status","checked","priority","classForTask","onBlur","autoFocus","deleteTask","id","ToDoListTasks","tasksElements","tasks","map","todolistId","ToDoListTitle","updateTodolistTitle","deleteTodolist","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","post","delete","put","newTaskTitle","todolisId","taskId","ADD_TODOLIST","ADD_TASK","CHANGE_TASK","DELETE_TODOLIST","DELETE_TASK","SET_TODOLISTS","SET_TASKS","initialState","nextTaskId","todolists","createTodolistSuccess","todolist","createTaskSuccess","updateTaskSuccess","newTask","deleteTodolistSuccess","deleteTaskSuccess","getTodolistsSuccess","setTasks","updateTodolistTitleSuccess","todolistTitle","reduser","action","tl","t","filter","ToDoList","saveState","stateAsString","JSON","stringify","localStorage","setItem","__restoreState","getItem","parse","forEach","length","onAddTask","addTask","newFilterValue","updateTask","isDone","getFiltredTasks","this","loadTasks","ConnectedToDoList","connect","dispatch","then","res","data","item","getState","find","resultCode","allTasks","items","App","nextTodoListId","td","addTodolist","setTodolists","ConnectedApp","newTodolist","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8355b013.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass AddNewItemForm extends React.Component {\n\n    state = {\n        error: false,\n        title: \"\",\n    };\n\n\n    onAddItemClick = () => {\n        let newTitle = this.state.title;\n        if (newTitle.trim() === \"\") {\n            this.setState({error: true});\n        } else {\n            this.props.addItem(newTitle);\n            this.setState({\n                error: false,\n                title: \"\"\n            });\n        }\n    };\n\n        onChangeInput = (e) => {\n            this.setState({\n                title: e.currentTarget.value\n            });\n           e.currentTarget.value===\"\" ? this.setState({error: true}) : this.setState({error:false});\n        };\n\n        onKeyPress = (e) => {\n            if(e.key==='Enter') this.onAddItemClick()\n        };\n\n    render = () => {\n        const classForInput = this.state.error ? \"error\": \"\";\n        return (\n                <div className=\"newItemForm\">\n                    <input onKeyPress={this.onKeyPress}\n                           onChange={this.onChangeInput}\n                           type=\"text\"\n                           placeholder=\"New item name\"\n                           className={`${classForInput} decorationInput`}\n                           value={this.state.title}\n                    />\n                    <button onClick={this.onAddItemClick}>Add</button>\n                </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\n\nclass ToDoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    };\n\n    onAllFilterClick = () => {this.props.changeFilter(\"All\") };\n    onCompletedFilterClick = () => {this.props.changeFilter(\"Completed\")};\n    onActiveFilterClick = () => {this.props.changeFilter(\"Active\") };\n    onShowFiltersClick = () => {this.setState({isHidden: false})};\n    onHideFiltersClick = () => {this.setState({isHidden: true})};\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <div>\n                <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                <button onClick={ this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                <button onClick={ this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>\n               }\n                {!this.state.isHidden && <span onClick={this.onHideFiltersClick}>hide</span>}\n                {this.state.isHidden && <span onClick={this.onShowFiltersClick}>show</span>}\n            </div>\n        );\n    }\n}\n\nexport default ToDoListFooter;\n\nToDoListFooter.propTypes = {\n    filterValue: PropTypes.string\n}","import React from 'react';\nimport './App.css';\n\nclass ToDoListTask extends React.Component {\n\n    state = {\n        editMode: false,\n        title: this.props.task.title\n    };\n\n    activateEditMode = () => {\n        this.setState({\n            editMode: true\n        })\n    };\n\n    deactivateEditMode= () => {\n        this.setState({\n            editMode: false\n        });\n        const updatedTask = {...this.props.task, title: this.state.title};\n        this.props.changeTask(updatedTask);\n    };\n\n    onTitleChanged = (e) =>{\n        this.setState({\n            title: e.currentTarget.value\n        })\n    };\n\n    onIsDoneChanged = (e) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        const updatedTask = {...this.props.task, status};\n        this.props.changeTask(updatedTask);\n    };\n\n        render = () => {\n            const classForTask = this.props.task.status===2 ? \"todoList-task done\" : \"todoList-task\";\n            let priority;\n            switch (this.props.task.priority) {\n                case 0: priority = \"low\";\n                case 1: priority = \"middle\";\n                case 2: priority = \"hi\";\n                case 3: priority = \"urgently\";\n                case 4: priority = \"later\";\n                default: priority=\"low\";\n            }\n        return (<div className={classForTask}>\n            <input type=\"checkbox\" checked={this.props.task.status===2} onChange={this.onIsDoneChanged} />\n                {this.state.editMode ? <input\n                                        onBlur={this.deactivateEditMode}\n                                        autoFocus={true}\n                                        value={this.state.title}\n                                        onChange={this.onTitleChanged}\n                    /> :\n                    <span onClick={this.activateEditMode}>{this.props.task.title}, priority: {priority}</span>\n                }\n                <button onClick={()=> {this.props.deleteTask(this.props.task.id)}}>X</button>\n        </div>\n        );\n    }\n}\n\n\nexport default ToDoListTask;\n\n","import React from 'react';\nimport ToDoListTask from './ToDoListTask';\n\nclass ToDoListTasks extends React.Component {\n    render = () => {\n        const tasksElements = this.props.tasks.map(\n            task => <ToDoListTask todolistId={this.props.todolistId}\n                                  key={task.id}\n                                  task={task}\n                                  deleteTask={this.props.deleteTask}\n                                  changeTask={this.props.changeTask}\n            />\n        );\n        return (\n                    <div className=\"todoList-tasks\">\n                     {tasksElements}\n                    </div>\n        );\n    }\n}\n\nexport default ToDoListTasks;","import React from 'react';\nimport './App.css';\n\nclass ToDoListTitle extends React.Component {\n    state = {\n        editMode: false,\n        title: this.props.title\n    };\n    deactivateEditMode = () => {\n        this.setState({\n            editMode: false\n        });\n        this.props.updateTodolistTitle(this.props.todolistId, this.state.title);\n    };\n    activateEditMode = () =>{\n        this.setState({\n            editMode: true\n        })\n    };\n    onTitleChanged = (e) =>{\n        this.setState({\n            title: e.currentTarget.value,\n        })\n    };\n    deleteTodolist = () => {\n        this.props.deleteTodolist(this.props.todolistId);\n    };\n    render = () =><div>\n        {this.state.editMode? <input onBlur={this.deactivateEditMode} autoFocus={true} value={this.state.title} onChange={this.onTitleChanged}/>:\n        <h3 onDoubleClick={this.activateEditMode} className=\"todoList-header__title\">{this.props.title}<button onClick={this.deleteTodolist}>X</button></h3>}\n    </div>\n}\n\nexport default ToDoListTitle;\n\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"0a4552fd-fc88-4874-a12b-39f74cc52685\"}\r\n});\r\n\r\nexport const todolistAPI = {\r\n    getTodolists(){\r\n        return  instance.get(\"\");\r\n    },\r\n    createTodolist(title){\r\n        return instance.post(\"\", {title},)\r\n    },\r\n    deleteTodolist(todolistId){\r\n        return instance.delete(`/${todolistId}`)\r\n    },\r\n    updateTodolistTitle(todolistId, title){\r\n        return instance.put(`/${todolistId}`, {title})\r\n    },\r\n    createTask(newTaskTitle, todolistId){\r\n      return   instance.post(`/${todolistId}/tasks`, {title: newTaskTitle})\r\n    },\r\n    updateTask(todolisId, updatedTask){\r\n        return instance.put(`/${todolisId}/tasks/${updatedTask.id}`, updatedTask)\r\n    },\r\n    deleteTask(todolistId, taskId){\r\n        return instance.delete(`/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    getTasks(todolistId){\r\n        return instance.get(`/${todolistId}/tasks`)\r\n    }\r\n};","import {todolistAPI} from \"./todolistAPI\";\r\n\r\nconst ADD_TODOLIST = \"TodoList/reduser/ADD_TODOLIST\";\r\nconst ADD_TASK = \"TodoList/reduser/ADD_TASK\";\r\nconst CHANGE_TASK = \"TodoList/reduser/CHANGE_TASK\";\r\nconst DELETE_TODOLIST = \"TodoList/reduser/DELETE_TODOLIST\";\r\nconst DELETE_TASK = \"TodoList/reduser/DELETE_TASK\";\r\nconst SET_TODOLISTS = \"TodoList/reduser/SET_TODOLISTS\";\r\nconst SET_TASKS = \"TodoList/reduser/SET_TASKS\";\r\nconst UPDATE_TODOLIST_TITLE = \"TodoList/reduser/UPDATE_TODOLIST_TITLE\";\r\n\r\nconst initialState = {\r\n    nextTaskId: 3,\r\n    todolists: []\r\n};\r\n\r\nconst reduser = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return {...state, todolists: [...state.todolists, action.todolist]};\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl) => {\r\n                        if (tl.id === action.todolistId) return {...tl, tasks: [...tl.tasks, action.task]};\r\n                        else return tl\r\n                    }\r\n                )\r\n            };\r\n        case UPDATE_TODOLIST_TITLE:\r\n            return {\r\n                ...state, todolists: state.todolists.map(tl => {\r\n                    if(tl.id === action.todolistId) return {...tl, title: action.todolistTitle};\r\n                    else return tl\r\n                })\r\n            };\r\n        case CHANGE_TASK: //action = {type: \"\", taskId, isDone, todolistId}\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) return {\r\n                        ...tl, tasks: tl.tasks.map(t => {\r\n                            if (t.id !== action.taskId) return t;\r\n                            else return action.newTask\r\n                        })\r\n                    };\r\n                    else return tl\r\n                })\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n            };\r\n\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) return {\r\n                        ...tl, tasks: tl.tasks.filter(t => t.id!==action.taskId)\r\n                    };\r\n                    else return tl\r\n                })\r\n            };\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            };\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists.map(tl => {\r\n                    if(tl.id === action.todolistId) return {...tl, tasks: action.tasks};\r\n                    else return tl;\r\n                })\r\n                ]\r\n            };\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport const loadTasks = (todolistId) => (dispatch) => {\r\n    todolistAPI.getTasks(todolistId).then(res=>{\r\n        const allTasks = res.data.items;\r\n        dispatch(setTasks(allTasks, todolistId));\r\n    })\r\n};\r\n\r\nexport const addTask = (todolistId, title) => (dispatch) => {\r\n    todolistAPI.createTask(title, todolistId).then(res =>{\r\n        const newTask = res.data.data.item;\r\n        dispatch(createTaskSuccess(newTask,todolistId))\r\n    })\r\n};\r\n\r\nexport const updateTask = (todolistId, newTask) => (dispatch, getState) =>{\r\n    getState().todolists.find(tl=>tl.id===todolistId)\r\n        .tasks.forEach((t=>{\r\n            if(t.id === newTask.id) {\r\n                todolistAPI.updateTask(todolistId,newTask).then(res=>{\r\n                    if(res.data.resultCode===0) dispatch(updateTaskSuccess(newTask.id, newTask, todolistId))\r\n                })\r\n            }\r\n    }))\r\n};\r\n\r\nexport const addTodolist = (title) => (dispatch) =>{\r\n    todolistAPI.createTodolist(title).then(res=>{\r\n        const newTodolist = res.data.data.item;\r\n        dispatch(createTodolistSuccess(newTodolist));\r\n    })\r\n};\r\n\r\nexport const setTodolists = () => (dispatch) => {\r\n    todolistAPI.getTodolists().then(res=>{\r\n        dispatch(getTodolistsSuccess(res.data));\r\n    })\r\n};\r\n\r\nexport const deleteTodolist = (todolistId) => (dispatch, getState) => {\r\n    if (getState().todolists.find(tl => tl.id === todolistId)) {\r\n        todolistAPI.deleteTodolist(todolistId).then(res => {\r\n            if (res.data.resultCode === 0) dispatch(deleteTodolistSuccess(todolistId));\r\n        })\r\n    }\r\n};\r\n\r\nexport const deleteTask = (todolistId, taskId) => (dispatch) => {\r\n    todolistAPI.deleteTask(todolistId, taskId).then(res => {\r\n        if(res.data.resultCode===0) dispatch(deleteTaskSuccess(todolistId, taskId))\r\n    })\r\n};\r\n\r\nexport const updateTodolistTitle = (todolistId, todolistTitle) => (dispatch, getState) =>{\r\n    if(getState().todolists.find(tl=>tl.id===todolistId)){\r\n        todolistAPI.updateTodolistTitle(dispatch(updateTodolistTitleSuccess(todolistId, todolistTitle)))\r\n    }\r\n};\r\n\r\n\r\nconst createTodolistSuccess = (todolist) =>({type: ADD_TODOLIST, todolist});\r\nconst createTaskSuccess = (task, todolistId) =>({type: ADD_TASK, task, todolistId});\r\nconst updateTaskSuccess = (taskId, newTask, todolistId) => ({type: CHANGE_TASK, taskId, newTask, todolistId});\r\nconst deleteTodolistSuccess = (todolistId) => ({type: DELETE_TODOLIST, todolistId});\r\nconst deleteTaskSuccess = (todolistId, taskId) => ({type: DELETE_TASK, todolistId, taskId});\r\nconst getTodolistsSuccess = (todolists) => ({type: SET_TODOLISTS, todolists});\r\nconst setTasks = (tasks, todolistId) => ({type: SET_TASKS, tasks, todolistId});\r\nexport const updateTodolistTitleSuccess = (todolistId, todolistTitle) => ({type: UPDATE_TODOLIST_TITLE, todolistId, todolistTitle});\r\n\r\nexport default reduser;\r\n","import React from 'react';\nimport './App.css';\nimport AddNewItemForm from './AddNewItemForm';\nimport ToDoListFooter from './ToDoListFooter';\nimport ToDoListTasks from './ToDoListTasks';\nimport ToDoListTitle from \"./ToDoListTitle\";\nimport {connect} from \"react-redux\";\nimport {addTask, deleteTask, deleteTodolist, updateTask, updateTodolistTitle, loadTasks} from \"./reduser\";\n\nclass ToDoList extends React.Component {\n\n    componentDidMount() {\n        this.props.loadTasks(this.props.id);\n    }\n\n    state = {\n        filterValue: \"All\",\n    };\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\n    };\n\n    __restoreState = () => {\n        let state = {\n            tasks: [],\n            filterValue: \"All\"\n        };\n        let stateAsString = localStorage.getItem(\"our-state-\" + this.props.id);\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n            state.tasks.forEach(t => {\n                if (t.id >= this.nextTaskId) this.nextTaskId = t.id + 1\n            })\n        }\n        this.nextTaskId = state.tasks.length;\n        this.setState(state);\n    };\n\n    onAddTask = (newTitle) => {\n        this.props.addTask(this.props.id, newTitle);\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        }, () => {\n            this.saveState();\n        })\n    };\n\n    changeTask = (updatedTask) => {\n       this.props.updateTask(this.props.id, updatedTask)\n    };\n\n    deleteTask = (taskId) => {\n        this.props.deleteTask(this.props.id, taskId);\n    };\n    render = () => {\n        let {tasks = []} = this.props;\n        const getFiltredTasks = (tasks, filter) => {\n            return tasks.filter(t => {\n                switch (filter) {\n                    case 'All':\n                        return true;\n                    case 'Completed':\n                        return t.isDone;\n                    case 'Active':\n                        return !t.isDone;\n                }\n            })\n        };\n\n        return (\n            <div className=\"todoList\">\n                <div className=\"todoList-header\">\n                    <ToDoListTitle updateTodolistTitle={this.props.updateTodolistTitle} deleteTodolist={this.props.deleteTodolist} todolistId={this.props.id} title={this.props.title}/>\n                    <AddNewItemForm addItem={this.onAddTask}/>\n                </div>\n                <ToDoListTasks todolistId={this.props.id} tasks={getFiltredTasks(tasks, this.state.filterValue)}\n                               deleteTask={this.deleteTask}\n                               changeTask={this.changeTask}\n                />\n                < ToDoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n            </div>\n        );\n    }\n}\n\nconst ConnectedToDoList = connect(null, {addTask, updateTask, deleteTask, deleteTodolist, updateTodolistTitle, loadTasks})(ToDoList);\n\nexport default ConnectedToDoList;\n\n\n","import React from 'react';\nimport './App.css';\nimport ToDoList from \"./ToDoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodolist, setTodolists} from \"./reduser\";\n\nclass App extends React.Component {\n\n    state = {\n        todolists: []\n    };\n\n    componentDidMount() {\n        this.props.setTodolists();\n    };\n\n    __restoreState = () => {\n        let state = {\n            todolists: []\n        };\n        let stateAsString = localStorage.getItem(\"todolists-state\");\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n            state.todolists.forEach(tl => {\n                if (tl.id >= this.nextTodoListId) this.nextTodoListId = tl.id + 1\n            });\n            this.setState(state);\n        }\n    };\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem(\"todolists-state\", stateAsString);\n    };\n\n    render = () => {\n        const todolists = this.props\n            .todolists\n            .map(td => <ToDoList key={td.id} id={td.id} title={td.title} tasks={td.tasks}/>);\n        return (\n            <>\n                <div>\n                    <AddNewItemForm addItem={this.props.addTodolist}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </>)\n    };\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todolists: state.todolists\n    }\n};\n\nconst ConnectedApp = connect(mapStateToProps, {addTodolist, setTodolists})(App);\n\nexport default ConnectedApp;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport reduser from \"./reduser\";\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nconst store = createStore(reduser, applyMiddleware(thunkMiddleware));\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}